[
  {
    "objectID": "workflow/data-science-workflow.html",
    "href": "workflow/data-science-workflow.html",
    "title": "Data Science Projects",
    "section": "",
    "text": "Mostly, for this type of project especially in ML/DL, the additional steps and tools are required. This makes the workflow more complicated. Here is my guide to streamline the workflow so that any data science project can be run and documented smoothly.",
    "crumbs": [
      "Workflow",
      "Data Science Projects"
    ]
  },
  {
    "objectID": "basics/basics.html",
    "href": "basics/basics.html",
    "title": "Quarto Concepts",
    "section": "",
    "text": "Mostly Quarto recommends using .qmd which in a variant of Markdown file to create a document but there are options to document your code within .ipynb notebook using the VS Code Notebook Editor as well as using the JupyterLab. The latter will provide a complete workflow to document projects related to software development and data science.\n\n\nThere are several types of documentation that can be created using Quarto. These are listed as followed:\n\nDocument — The basic component which contains only a .qmd file or .ipynb notebook. This can be published like a single page website.\nWebsites — Publish collections of documents as a website. Websites support multiple forms of navigation and full-text search.\nBlogs — Create a blog with an about page, flexible post listings, categories, RSS feeds, and over twenty themes.\nPresentations — Author PowerPoint, Beamer, and Revealjs presentations using the same syntax you’ve learned for creating documents.\nBooks — Create books and manuscripts in print (PDF, MS Word) and online (HTML, ePub) formats.\nInteractivity — Include interactive components to help readers explore the concepts and data you are presenting more deeply.\n\nTo be more reproducible and more organized, Quarto should not be used as a single Document even if there is a single document file. Instead, it is better to publish collections of it in a Website style because it is well-documented and more suitable for hosting online.",
    "crumbs": [
      "Basics"
    ]
  },
  {
    "objectID": "basics/basics.html#basic-concepts",
    "href": "basics/basics.html#basic-concepts",
    "title": "Quarto Concepts",
    "section": "",
    "text": "Mostly Quarto recommends using .qmd which in a variant of Markdown file to create a document but there are options to document your code within .ipynb notebook using the VS Code Notebook Editor as well as using the JupyterLab. The latter will provide a complete workflow to document projects related to software development and data science.\n\n\nThere are several types of documentation that can be created using Quarto. These are listed as followed:\n\nDocument — The basic component which contains only a .qmd file or .ipynb notebook. This can be published like a single page website.\nWebsites — Publish collections of documents as a website. Websites support multiple forms of navigation and full-text search.\nBlogs — Create a blog with an about page, flexible post listings, categories, RSS feeds, and over twenty themes.\nPresentations — Author PowerPoint, Beamer, and Revealjs presentations using the same syntax you’ve learned for creating documents.\nBooks — Create books and manuscripts in print (PDF, MS Word) and online (HTML, ePub) formats.\nInteractivity — Include interactive components to help readers explore the concepts and data you are presenting more deeply.\n\nTo be more reproducible and more organized, Quarto should not be used as a single Document even if there is a single document file. Instead, it is better to publish collections of it in a Website style because it is well-documented and more suitable for hosting online.",
    "crumbs": [
      "Basics"
    ]
  },
  {
    "objectID": "examples/intro.html#introduction-to-quarto-report",
    "href": "examples/intro.html#introduction-to-quarto-report",
    "title": "Documentation with Quarto",
    "section": "Introduction to Quarto Report",
    "text": "Introduction to Quarto Report\nFor a demonstration of the capability of Quarto.\n\nSetup\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\n\n\n\nData Preprocessing\nTable 1 presents data on Iris dataset. All length and width are in centimeter (cm).\n\n\nCode\niris = load_iris()\ndf = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n\ntarget = pd.Series(iris.target)\ndf[\"target\"] = target.apply(lambda x, y: y[x], args=(iris.target_names,))\n\ncolumn_names = {c: c.replace(\" (cm)\", \"\") for c in df.columns}\ndf = df.rename(columns=column_names)\n\ndf\n\n\n\n\nTable 1: Iris dataset\n\n\n\n\n\n\n\n\n\n\n\nsepal length\nsepal width\npetal length\npetal width\ntarget\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\n\n\n\n\nExploratory Data Analysis (EDA)\nWe will start our EDA process with the distribution of sepal length of each target.\n\n\nCode\ndf.groupby(\"target\")[\"sepal length\"].hist(alpha=0.5, legend=True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Distribution of sepal lengths\n\n\n\n\n\nWe’ve created Figure 1 🎊. It seems like there is some pattern that can be used to identify whether the given data is setosa, versicolor or virginica.\nIn order to find a generalized model, we need to incorporate multiple aspects of data as possible. Therefore, we have to inspect other features as well. petal length seems to be a good start but does it give us new information? - We can explore this by displaying the relationship between sepal length and petal length.\n\n\nCode\ngrouped_df = df.groupby(\"target\")\n_, axes = plt.subplots(1, 3, figsize=(12, 5), sharey=True, sharex=True)\n\nfor i, (n, g) in enumerate(grouped_df):\n    g.plot(x=\"sepal length\", y=\"petal length\", kind=\"scatter\", ax=axes[i], title=n)\n\n\n\n\n\n\n\n\nFigure 2: Correlation between sepal length and petal length\n\n\n\n\n\nAs shown in Figure 2, there is a linear relationship in versicolor and virginica. Though, this is not much clear for setosa. In addition, in each target group, their petal length and sepal length are in different range especially for petal length. virginica is likely to be the biggest in length and setosa is the smallest one.\nWhat we can conclue that petal length looks like another important feature for modelling. However, when we use both sepal length and petal length, we should be careful of multicollinearity.\nWhat about on the sepal width and petal width?\n\n\nCode\n_, axes = plt.subplots(1, 3, figsize=(12, 5), sharey=True, sharex=True)\n\nfor i, (n, g) in enumerate(grouped_df):\n    g.plot(x=\"sepal width\", y=\"petal width\", kind=\"scatter\", ax=axes[i], title=n)\n\n\n\n\n\n\n\n\nFigure 3: Correlation between sepal width and petal width\n\n\n\n\n\nYou will see that from Figure 3, it has the similar behaviors between sepal width and petal width like in Figure 2. Therefore, they are the other interesting features to the model.",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "Quarto is an open-source scientific and technical publishing system. It aims at making knowledge sharing more dynamic, more accessible and more reproducible through a complete workflow and best practices. My aim is to use Quarto as an orchestration tool for knowledge repos. This website can act as a starting template for documenting projects in various area of interests.",
    "crumbs": [
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "Quarto is an open-source scientific and technical publishing system. It aims at making knowledge sharing more dynamic, more accessible and more reproducible through a complete workflow and best practices. My aim is to use Quarto as an orchestration tool for knowledge repos. This website can act as a starting template for documenting projects in various area of interests.",
    "crumbs": [
      "Introduction to Quarto"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Here is a list of useful resources:\n\nMarkdown Syntax and Tools\n\nMarkdown Basics\nMermaid Diagramming and Charting Tool\n\nQuarto Documentation\n\nHow to Get Started with Quarto\nComprehensive Guide to Using Quarto\nGitHub Actions for Quarto\n\nQuarto Tutorials and Examples\n\nMaking Sharable Documents with Quarto\n\nVersion History and Changelog\n\nHow to Write a Good Commit Message\nWhat is a changelog and How to generate it\nA Highly Customizable Changelog Generator",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "workflow/workflow.html",
    "href": "workflow/workflow.html",
    "title": "Quarto Workflow",
    "section": "",
    "text": "To successfully orchestrate sharable documents using Quarto, you need to have a good workflow and in order to have that we need to first understand components and commands that Quarto has.",
    "crumbs": [
      "Workflow"
    ]
  },
  {
    "objectID": "workflow/workflow.html#overview",
    "href": "workflow/workflow.html#overview",
    "title": "Quarto Workflow",
    "section": "Overview",
    "text": "Overview\nBasic Quarto workflow is simply these 3 steps:\n\n\n\n\n\nflowchart LR;\n  A[Authoring] --&gt; B[Rendering] --&gt; C[Publishing];",
    "crumbs": [
      "Workflow"
    ]
  },
  {
    "objectID": "workflow/workflow.html#step-by-step-workflow",
    "href": "workflow/workflow.html#step-by-step-workflow",
    "title": "Quarto Workflow",
    "section": "Step-by-Step Workflow",
    "text": "Step-by-Step Workflow\nLet’s break down what we have to do in each step by\n\nAuthoring — Usually this step is an iterative approach. You can imagine it like you are in a development phase of your project. What you have to do is code execuation or more specifically:\n\nCode Commit then Repeat.\n\nThe difference when you have Quarto is you need to add some documentation along the way while you developing your code. Therefore, you will need to see changes in both of your code and documentation version of it. To do that using the command below.\n# Preview the whole project in the current directory\nquarto preview\nIn order to preview a report for an individual file.\n# Preview only for an index file\nquarto preview index.ipynb\nWhat Quarto does behind the scene is that it renders files and watches those for any changes. Some output files may be generated such as .quarto and _site folder in case of a website project. Those files are the way Quarto uses to keep track of your project (code, outputs and documentation) and be able to provide a live preview for your development.\nNote that it is best practice to have a version control service such as GitHub to keep track of your code by the beginning of your project. In addition, you should add a .gitignore file contains both .quarto and _site if you want to use Quarto to render and publish those contents.\nMoreover, Quarto uses a _quarto.yml file to configure metadata about your project. For example, if your project is a website, _quarto.yml may contain information about a title or theme. Also, it can be the place where configurations on rendering files are.\nIn sum, there are processes within authoring itself — Execution, Preview and Project Metadata.\nRendering — This process is about generating a report-like document for each executable files. A fully re-rendering is requrired as to have all changes reflected before publishing.\n# Render the whole project in the current directory\nquarto render\nIn order to render only an individual file.\n# Render only for an index file\nquarto render index.ipynb\nNote that Quarto has rendered targets by default to be only executable files listed here: .qmd, ,ipynb, .md and .Rmd. See the Render Targets configuration.\nIf you want to execute a report on-the-fly. Use --execute flag.\n# Execute and render the whole project in the current directory\nquarto render --execute\n\n# Execute and render only an index file\nquarto render index.ipynb --execute\nNote that if you are using --execute flag and _quarto.yml is set to have something like Freeze Option, a _freeze directory will be created automatically to store the results of computations. Also, these results should be check in to version control.\nBut What is freeze? — It is an option to denote that computational documents should be re-rendered. When freeze is set to auto or true, you do not to fully re-render the code or just re-render as needed. This makes your workflow more efficient.\nAnyway, in ML/DL projects, most of the time, you do not want to re-execute the code as it has already done by another cloud services like Google Colab, Kaggle or Amazon EC2 for faster training the models. So, the --execute flag will not be used and _freeze directory will never be created.\nThen What happens if we do not have the computation results in _freeze? — My understanding is all necessary files are still rendered in _site and .quarto and when you publish your project even _site and .quarto are ignored by a .gitignore file, Under the hood, Quarto is able to use those rendered files to be publish on the hosting service without depending on _freeze.\nIn sum, we do not need to pay attention to a _freeze directory as we still have rendered files in _site and .quarto. But, we can not ignore setting a freeze option to auto in _quarto.yml because it is important for efficint-sake that we are re-rendering only if source code changes.\nPublishing — This is another iterative step. It may required you to deploy your websites or documents several times before reaching the desired output. In my workflow, I will use GitHub Pages as a hosting service.\nAll the steps are provided in Publishing with GitHub Pages but I will point out some interesting sections.\nIf you are not using Render to docs method to publish your website. You will need to publish using Quarto.\n# Publish on gh-pages branch\nquarto publish gh-pages\n# Publish a single document file\nquarto publish gh-pages index.ipynb\nNote that you will need to follow these two steps before hand:\n\nCheck out and push gh-pages branch to create a source branch.\nSet up gh-pages as a source branch for GitHub Pages in Settings : Pages.\n\nAnd GitHub Pages needs to have an index.html as a default to be able to host a webpage. Therefore, if your website contains multiple pages, you need to have one file named index.html so that GitHub Pages can publish what so called “homepage” sucessfully.\n\nAll the steps are repeating as the development continues. It is also updating the project as a release while the source code changes along the way.\n\n\n\n\n\n\nNote\n\n\n\nUsing quarto --help command for Quarto documentation.\n\n\n\nCI/CD with GitHub Actions\nNow, we manually publish the website to GitHub Pages but what if we want to remove this tedious process of running quarto publish gh-pages, GitHub Actions is what you want. It will automate integration processes like code checkout, running tests and building/packaging your code through .github/workflows. In other words, it will publish your website automatically triggered from commits.\nNote that you also need to change Workflow permissions in the Actions section of your repository Settings to be Read and write permission in order to allow GitHub Actions to trigger the workflow.\nDepending on how much you want GitHub Actions to automate your workflow. You are free to modify .github/workflows/publish.yml as you like. Now, I set up an automation to just Rendering and Publishing not re-executing the code. This is because most ML/DL projects are not feasible to be executing on CI/CD server! See the guide for Publishing with Continuous Integration (CI) to choose the one that fit your need.\n\n\nCHANGELOG\nThroughout the project development, there are changes made along the way and it is the best practice to keep logging those changes too. The additional tool that I use is called git-cliff. Note that In most changelog generator, it is required to tag your commits to be able to document date changes. So, the workflow to release a documentation website with version history is the following:\n\n\n\n\n\nflowchart LR;\n  A[Code] --&gt; B[Commit] --&gt; C[Tag] --&gt; D[Push];\n\n\n\n\n\n\nThe best practice is to do git commit frequently and when you want to release your code, using git tag to check out your code locally. After that, using git push to also check out your code to the remote repository.\n\n\n\n\n\n\nTip\n\n\n\nyou can use for example, git tag -a v0.0.1 -m \"version 0.0.1 - soft launch\" to tag your code after a few commits. Also, you can save your development to a remote repository using git push origin main or release your code to the public via git push origin v0.0.1 or push all tags using git push origin --tags.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you are using GitHub Actions to automatically publish your documentation and you consider using git tag to release your documentation, it is better to only run your CI/CD pipeline when there is a new release on your documentation. Therefore, you need set .github/workflows/publish.yml\n\n\n\nCommit Messages\ngit-cliff makes use of commit messages to automatically generate changelog for you. Therefore, it is necessary for those messages to have a consistency format something like this:\ntype(scope): subject\n\noptional body\n\n[optional footer(s)]\n\n\n\n\n\n\nTip\n\n\n\nyou can use git commit instead of git commit -m type(scope): subject -m body -m flags. This will prompt a text editor of your choice that makes you create a commit message easier.\n\n\nMostly, what you want to keep changlog is your documentation as it is your knowledge repository. So, I will focus on which type and scope to be used for changing in your documentation. See the guide for a full Conventional Commits and a simplified version of Git Commit Message Style Guide.\nThere are 6 main types that we will use for knowledge repository.\n\nfeat: A new feature, but in this case, it should be your new documentation like a new .ipynb notebook added to the repository.\nfix: A bug fix like fixing an error on executable .ipynb notebook.\nrefactor: Refactoring production code such as changing navigation page in _quarto.yml.\ndocs: Changes to documentation such as updating some sections in the document or fixing document typo.\nstyle: Formatting, removing a white-space, etc; no meaning of the code change\nchore: Changes to configuration files like updating build tasks, package manager configuration; no production code change\n\nNext, scope can be any category you want but MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(sidebar): or docs(README):.\n\n\n\n\n\n\nWarning\n\n\n\nscope can be the most flexible part of a commit message. However, it is crucial for keeping it organized so that those commits are grouped into human-readable categories. This is the only thing that matters!\n\n\nThe footer is optional and is used to reference issue tracker IDs (which in our case, it does not matter much). However, the most important footer convention is BREAKING CHANGE:. It introduces a breaking API change correlating with a major change in software development. Also, you could add ! after the type(scope) to draw attention to the breaking change footer.\n\n\nCHANGELOG Documentation\nAfter multiple commits and before pushing a release tag to a remote repository like GitHub, we need to document our changes into CHANGELOG.md file using the following command:\n# Generate changelog into a CHANGELOG.md file\ngit-cliff -o CHANGELOG.md\nNote that you can also keep unreleased changes in CHANGELOG.md file (if you do not tag your code before running this command), however it is not that useful because of the lack of date information.\n\n\n\n\n\n\nNote\n\n\n\nUsing git-cliff --help command for git-cliff documentation.",
    "crumbs": [
      "Workflow"
    ]
  }
]